const bcrypt = require('bcrypt');

const User = require('../models/user');
const routes = require('express').Router();

routes.get('/:id', (req, res, next) => {
  if (Number(req.params.id)) {
    res.status(200).json({
      _id: req.params.id,
      name: "Ging Gonzalez",
      email: "ginggonzalez3@gmail.com",
      address: {
          street: "",
          city: "",
          state: "",
          zip_code: ""
      }
    });
  }
  else {
    next();
  }
});

routes.post('/create', (req, res) => {
  // Delete the _id property from req.body since _id will be generated by
  // mongoDB as the data is inserted
  delete req.body._id;

  // hash the password
  const saltRounds = 10;

  bcrypt.hash(req.body.password, saltRounds)
    .then(hash => {
      req.body.password = hash;

      // Add user to the database
      User.create(req.body, (err, user) => {
        if (!err) {
          user.password = undefined;
          console.log(user);
          res.status(201).json({
            status: "201",
            message: "Resource Created."
          });
        }
        else {
          res.status(500).json({
            status: "500",
            message: "Internal Server Error."
          });
        }
      });
    });
});

routes.post('/login', (req, res) => {
  User.findOne({email: req.body.email})
  .exec((err, user) => {
    if (!err) {
      if (user) {
        bcrypt.compare(req.body.password, user.password)
        .then(match => {
          if (match) {
            user.password = undefined;
            req.session.user = user;

            res.status(200)
            .json({
              status: "200",
              user: user
            });
          }
          else {
            res.status(200).json({
              status: "200",
              error: "Invalid credentials."
            });
          }
        });
      }
      else {
        res.status(200).json({
          status: "200",
          error: "Invalid credentials."
        });
      }
    }
    else {
      res.status(500).json({
        status: "500",
        error: "Internal Server Error"
      });
    }
  });
});

routes.get('/logout', (req, res) => {
  req.session.destroy(err => {
    if (err) {
      console.log(err);
    }
  });

  res.status(200).json({
    status: "200",
    message: "User logged out."
  })
});

routes.get('/active', (req, res) => {
  var active = false;
  if (req.session.user) {
    active = true;
  }

  res.status(200).json({
    status: "200",
    active: active
  });
});

module.exports = routes;
